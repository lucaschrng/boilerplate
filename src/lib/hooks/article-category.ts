/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ArticleCategory } from "@zenstackhq/runtime/models";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateArticleCategory(options?: Omit<(UseMutationOptions<(ArticleCategory | undefined), DefaultError, Prisma.ArticleCategoryCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ArticleCategoryCreateArgs, DefaultError, ArticleCategory, true>('ArticleCategory', 'POST', `${endpoint}/articleCategory/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ArticleCategoryCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ArticleCategoryCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ArticleCategory, Prisma.ArticleCategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ArticleCategoryCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ArticleCategory, Prisma.ArticleCategoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyArticleCategory(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ArticleCategoryCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ArticleCategoryCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ArticleCategory', 'POST', `${endpoint}/articleCategory/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ArticleCategoryCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ArticleCategoryCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ArticleCategoryCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyArticleCategory<TArgs extends Prisma.ArticleCategoryFindManyArgs, TQueryFnData = Array<Prisma.ArticleCategoryGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ArticleCategoryFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ArticleCategory', `${endpoint}/articleCategory/findMany`, args, options, fetch);
}

export function useInfiniteFindManyArticleCategory<TArgs extends Prisma.ArticleCategoryFindManyArgs, TQueryFnData = Array<Prisma.ArticleCategoryGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ArticleCategoryFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ArticleCategory', `${endpoint}/articleCategory/findMany`, args, options, fetch);
}

export function useSuspenseFindManyArticleCategory<TArgs extends Prisma.ArticleCategoryFindManyArgs, TQueryFnData = Array<Prisma.ArticleCategoryGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ArticleCategoryFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ArticleCategory', `${endpoint}/articleCategory/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyArticleCategory<TArgs extends Prisma.ArticleCategoryFindManyArgs, TQueryFnData = Array<Prisma.ArticleCategoryGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ArticleCategoryFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ArticleCategory', `${endpoint}/articleCategory/findMany`, args, options, fetch);
}

export function useFindUniqueArticleCategory<TArgs extends Prisma.ArticleCategoryFindUniqueArgs, TQueryFnData = Prisma.ArticleCategoryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ArticleCategoryFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ArticleCategory', `${endpoint}/articleCategory/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueArticleCategory<TArgs extends Prisma.ArticleCategoryFindUniqueArgs, TQueryFnData = Prisma.ArticleCategoryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ArticleCategoryFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ArticleCategory', `${endpoint}/articleCategory/findUnique`, args, options, fetch);
}

export function useFindFirstArticleCategory<TArgs extends Prisma.ArticleCategoryFindFirstArgs, TQueryFnData = Prisma.ArticleCategoryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ArticleCategoryFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ArticleCategory', `${endpoint}/articleCategory/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstArticleCategory<TArgs extends Prisma.ArticleCategoryFindFirstArgs, TQueryFnData = Prisma.ArticleCategoryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ArticleCategoryFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ArticleCategory', `${endpoint}/articleCategory/findFirst`, args, options, fetch);
}

export function useUpdateArticleCategory(options?: Omit<(UseMutationOptions<(ArticleCategory | undefined), DefaultError, Prisma.ArticleCategoryUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ArticleCategoryUpdateArgs, DefaultError, ArticleCategory, true>('ArticleCategory', 'PUT', `${endpoint}/articleCategory/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ArticleCategoryUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ArticleCategoryUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ArticleCategory, Prisma.ArticleCategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ArticleCategoryUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ArticleCategory, Prisma.ArticleCategoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyArticleCategory(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ArticleCategoryUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ArticleCategoryUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ArticleCategory', 'PUT', `${endpoint}/articleCategory/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ArticleCategoryUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ArticleCategoryUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ArticleCategoryUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertArticleCategory(options?: Omit<(UseMutationOptions<(ArticleCategory | undefined), DefaultError, Prisma.ArticleCategoryUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ArticleCategoryUpsertArgs, DefaultError, ArticleCategory, true>('ArticleCategory', 'POST', `${endpoint}/articleCategory/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ArticleCategoryUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ArticleCategoryUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ArticleCategory, Prisma.ArticleCategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ArticleCategoryUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ArticleCategory, Prisma.ArticleCategoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteArticleCategory(options?: Omit<(UseMutationOptions<(ArticleCategory | undefined), DefaultError, Prisma.ArticleCategoryDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ArticleCategoryDeleteArgs, DefaultError, ArticleCategory, true>('ArticleCategory', 'DELETE', `${endpoint}/articleCategory/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ArticleCategoryDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ArticleCategoryDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ArticleCategory, Prisma.ArticleCategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ArticleCategoryDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ArticleCategory, Prisma.ArticleCategoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyArticleCategory(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ArticleCategoryDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ArticleCategoryDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ArticleCategory', 'DELETE', `${endpoint}/articleCategory/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ArticleCategoryDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ArticleCategoryDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ArticleCategoryDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateArticleCategory<TArgs extends Prisma.ArticleCategoryAggregateArgs, TQueryFnData = Prisma.GetArticleCategoryAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ArticleCategoryAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ArticleCategory', `${endpoint}/articleCategory/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateArticleCategory<TArgs extends Prisma.ArticleCategoryAggregateArgs, TQueryFnData = Prisma.GetArticleCategoryAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ArticleCategoryAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ArticleCategory', `${endpoint}/articleCategory/aggregate`, args, options, fetch);
}

export function useGroupByArticleCategory<TArgs extends Prisma.ArticleCategoryGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ArticleCategoryGroupByArgs['orderBy'] } : { orderBy?: Prisma.ArticleCategoryGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ArticleCategoryGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ArticleCategoryGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ArticleCategoryGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ArticleCategoryGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ArticleCategoryGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ArticleCategory', `${endpoint}/articleCategory/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByArticleCategory<TArgs extends Prisma.ArticleCategoryGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ArticleCategoryGroupByArgs['orderBy'] } : { orderBy?: Prisma.ArticleCategoryGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ArticleCategoryGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ArticleCategoryGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ArticleCategoryGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ArticleCategoryGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ArticleCategoryGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ArticleCategory', `${endpoint}/articleCategory/groupBy`, args, options, fetch);
}

export function useCountArticleCategory<TArgs extends Prisma.ArticleCategoryCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ArticleCategoryCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ArticleCategoryCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ArticleCategory', `${endpoint}/articleCategory/count`, args, options, fetch);
}

export function useSuspenseCountArticleCategory<TArgs extends Prisma.ArticleCategoryCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ArticleCategoryCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ArticleCategoryCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ArticleCategory', `${endpoint}/articleCategory/count`, args, options, fetch);
}

export function useCheckArticleCategory<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; name?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ArticleCategory', `${endpoint}/articleCategory/check`, args, options, fetch);
}
