//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
}

enum ArticleVisibility {
  PUBLIC
  PRIVATE
}

model Account {
  id                    String    @id()
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
}

model Session {
  id        String   @id()
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
}

model User {
  id            String    @id()
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  articles      Article[]

  @@unique([email])
}

model VerificationToken {
  identifier String
  token      String   @unique()
  expires    DateTime

  @@unique([identifier, token])
}

model Verification {
  id         String    @id()
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

model Article {
  id         String            @id() @default(cuid())
  title      String
  content    String
  status     ArticleStatus     @default(DRAFT)
  visibility ArticleVisibility @default(PUBLIC)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt()
  authorId   String
  author     User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories ArticleCategory[]
}

model ArticleCategory {
  id        String    @id() @default(cuid())
  name      String
  articles  Article[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
}
