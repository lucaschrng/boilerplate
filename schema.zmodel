// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

plugin hooks {
    provider = '@zenstackhq/tanstack-query'
    target = 'react'
    version = 'v5'
    output = "./src/lib/hooks"
}

// Necessary for Next auth
model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime
}

model Session {
    id        String   @id
    expiresAt DateTime
    token     String
    createdAt DateTime
    updatedAt DateTime
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([token])
}

model User {
    id            String    @id
    name          String
    email         String
    emailVerified Boolean
    image         String?
    createdAt     DateTime
    updatedAt     DateTime
    sessions      Session[]
    accounts      Account[]
    posts         Post[]

    @@unique([email])

    @@allow('create,read', true)

    @@allow('update,delete', auth() == this)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Verification {
    id         String    @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime?
    updatedAt  DateTime?
}
